//#### Task 3 üíª

// –°–æ–∑–¥–∞–π—Ç–µ –¥–≤–∞ –æ–±—ä–µ–∫—Ç–∞ –º–∞—à–∏–Ω. 
// –†–µ–∞–ª–∏–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ –≤—ã–≤–æ–¥—è—â–∏–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–≤–µ—Ä–µ–π –º–∞—à–∏–Ω—ã, 
// –∏ —Å –∫–∞–∫–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ä—É–ª—å. –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å 
// —Å–æ–æ—Ç–≤–µ—Ç–≤—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—à–∏–Ω–∞—Ö. 
// –ö –ø—Ä–∏–º–µ—Ä—É `This car has 3 doors and this is left-hand drive car`

class Car1 {
    doors: number;
    drive: string;
   constructor(doors: number, drive:string){
    this.doors = doors;
    this.drive = drive;
    }
  }
  const Car2 = new Car1(4,"Left-hand");
  const Car3 = new Car1(2,"Right-hand");

  function inforcar(arg1:string, arg2:string) : void {
      console.log (`This car has ${this.doors} doors and this is ${this.drive} drive car` + arg1 + arg2)
  }
  inforcar.apply(Car2,["4","8"]);
  inforcar.apply(Car3,["2","8"]);